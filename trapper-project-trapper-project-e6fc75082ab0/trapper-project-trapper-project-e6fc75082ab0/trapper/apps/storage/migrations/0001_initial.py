# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-06-07 13:55
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import trapper.apps.common.fields
import trapper.apps.storage.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', trapper.apps.common.fields.SafeTextField(blank=True, max_length=2000, null=True)),
                ('status', models.CharField(choices=[(b'Private', b'Private'), (b'OnDemand', b'On demand'), (b'Public', b'Public')], default=b'Private', max_length=8)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('period_begin', models.DateTimeField(blank=True, null=True)),
                ('period_end', models.DateTimeField(blank=True, null=True)),
                ('managers', models.ManyToManyField(blank=True, help_text=b'Select your managers.', related_name='managed_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(trapper.apps.storage.mixins.AccessModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CollectionMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('level', models.IntegerField(choices=[(1, b'Can view'), (2, b'Can update'), (3, b'Can create'), (4, b'Can delete'), (5, b'Can view (request)'), (6, b'Can view (basic)')])),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.Collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='protected/storage/resource/')),
                ('file_thumbnail', models.ImageField(blank=True, editable=False, null=True, upload_to='protected/storage/resource/thumbnails/')),
                ('file_preview', models.ImageField(blank=True, editable=False, null=True, upload_to='protected/storage/resource/previews/')),
                ('extra_file', models.FileField(blank=True, null=True, upload_to='protected/storage/resource/')),
                ('mime_type', models.CharField(blank=True, choices=[(b'audio/ogg', b'audio/ogg'), (b'audio/mp3', b'audio/mp3'), (b'audio/x-wav', b'audio/x-wav'), (b'audio/wav', b'audio/wav'), (b'video/mp4', b'video/mp4'), (b'video/webm', b'video/webm'), (b'video/ogg', b'video/ogg'), (b'image/jpeg', b'image/jpeg')], max_length=255, null=True)),
                ('extra_mime_type', models.CharField(blank=True, choices=[(b'audio/ogg', b'audio/ogg'), (b'audio/mp3', b'audio/mp3'), (b'audio/x-wav', b'audio/x-wav'), (b'audio/wav', b'audio/wav'), (b'video/mp4', b'video/mp4'), (b'video/webm', b'video/webm'), (b'video/ogg', b'video/ogg'), (b'image/jpeg', b'image/jpeg')], max_length=255, null=True)),
                ('resource_type', models.CharField(blank=True, choices=[(b'V', b'Video'), (b'I', b'Image'), (b'A', b'Audio')], max_length=1, null=True)),
                ('date_uploaded', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('date_recorded', models.DateTimeField()),
                ('status', models.CharField(choices=[(b'Private', b'Private'), (b'OnDemand', b'On demand'), (b'Public', b'Public')], default=b'Private', max_length=8)),
                ('description', trapper.apps.common.fields.SafeTextField(blank=True, null=True)),
                ('inherit_prefix', models.BooleanField(default=False, verbose_name='Deployment ID prefix')),
                ('custom_prefix', models.CharField(blank=True, max_length=255, null=True)),
                ('managers', models.ManyToManyField(blank=True, related_name='managed_resources', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_resources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date_recorded',),
            },
            bases=(trapper.apps.storage.mixins.AccessModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ResourceAverageRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average', models.DecimalField(decimal_places=1, default=0, max_digits=6)),
                ('resource', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='storage.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceUserRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.DecimalField(decimal_places=1, default=0, max_digits=6)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to='storage.Resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaggedResource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='storage.Resource')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_taggedresource_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='storage.TaggedResource', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='collection',
            name='members',
            field=models.ManyToManyField(blank=True, through='storage.CollectionMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='collection',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_collections', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='collection',
            name='resources',
            field=models.ManyToManyField(to='storage.Resource'),
        ),
    ]
